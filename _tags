# OASIS_START
# DO NOT EDIT (digest: 58ea4f3c777077432ffc4414242bd962)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library webidl
"webidl.cmxs": use_webidl
# Executable testWebidl
<testWebidl.{native,byte}>: package(batteries)
<testWebidl.{native,byte}>: package(fmt)
<testWebidl.{native,byte}>: package(menhirLib)
<testWebidl.{native,byte}>: package(ocamlgraph)
<testWebidl.{native,byte}>: package(ppx_deriving.show)
<testWebidl.{native,byte}>: package(ppx_import)
# Executable testLexer
<testLexer.{native,byte}>: package(fmt)
<testLexer.{native,byte}>: package(menhirLib)
<testLexer.{native,byte}>: package(ppx_deriving.show)
<testLexer.{native,byte}>: package(ppx_import)
<*.ml{,i,y}>: package(ppx_deriving.show)
# Executable testSimpleAst
<testSimpleAst.{native,byte}>: package(batteries)
<testSimpleAst.{native,byte}>: package(fmt)
<testSimpleAst.{native,byte}>: package(menhirLib)
<testSimpleAst.{native,byte}>: package(ocamlgraph)
<testSimpleAst.{native,byte}>: package(ppx_deriving.eq)
<testSimpleAst.{native,byte}>: package(ppx_deriving.ord)
<testSimpleAst.{native,byte}>: package(ppx_import)
# Executable testParse
<testParse.{native,byte}>: package(batteries)
<testParse.{native,byte}>: package(fmt)
<testParse.{native,byte}>: package(menhirLib)
<testParse.{native,byte}>: package(ocamlgraph)
<testParse.{native,byte}>: package(ppx_deriving.eq)
<testParse.{native,byte}>: package(ppx_deriving.ord)
<testParse.{native,byte}>: package(ppx_import)
# Executable testGraph
<testGraph.{native,byte}>: package(batteries)
<testGraph.{native,byte}>: package(fmt)
<testGraph.{native,byte}>: package(menhirLib)
<testGraph.{native,byte}>: package(ocamlgraph)
<testGraph.{native,byte}>: package(ppx_deriving.eq)
<testGraph.{native,byte}>: package(ppx_deriving.ord)
<testGraph.{native,byte}>: package(ppx_import)
# Executable testCalculateBlocking
<testCalculateBlocking.{native,byte}>: package(batteries)
<testCalculateBlocking.{native,byte}>: package(fmt)
<testCalculateBlocking.{native,byte}>: package(menhirLib)
<testCalculateBlocking.{native,byte}>: package(ocamlgraph)
<testCalculateBlocking.{native,byte}>: package(ppx_deriving.eq)
<testCalculateBlocking.{native,byte}>: package(ppx_deriving.ord)
<testCalculateBlocking.{native,byte}>: package(ppx_import)
# Executable blocklist
<blocklist.{native,byte}>: package(batteries)
<blocklist.{native,byte}>: package(fmt)
<blocklist.{native,byte}>: package(menhirLib)
<blocklist.{native,byte}>: package(ocaml-protoc)
<blocklist.{native,byte}>: package(ocamlgraph)
<blocklist.{native,byte}>: package(ppx_deriving.eq)
<blocklist.{native,byte}>: package(ppx_deriving.ord)
<blocklist.{native,byte}>: package(ppx_import)
<*.ml{,i,y}>: package(batteries)
<*.ml{,i,y}>: package(fmt)
<*.ml{,i,y}>: package(menhirLib)
<*.ml{,i,y}>: package(ocaml-protoc)
<*.ml{,i,y}>: package(ocamlgraph)
<*.ml{,i,y}>: package(ppx_deriving.eq)
<*.ml{,i,y}>: package(ppx_deriving.ord)
<*.ml{,i,y}>: package(ppx_import)
# OASIS_STOP
true: use_menhir, table
